1.      активировать виртуальное окружение либо создать новое
Писать зависимости в requirements.txt и этот файл добавлять в git.
Пример файла (можно с указанием версий через ==, можно без):
Django==1.8.5
django-flat-theme==1.1.1
mysql-python==1.2.5
gunicorn==19.4.1
pytz==2015.6
python-memcached==1.57
django-debug-toolbar==1.4


В директории с гитом прописать:
$ pip freeze > requirements.txt
При клонировании репозитория на другой компьютер или сервер выполнить
(предварительно создав или активировав нужное виртуальное окружение):
$ pip install -r requirements.txt


2.      настроить git(создать публичный репозиторий, склонировать на компьютер, настроить гитИгнор,
3.      настроить фикстуры в файле Conftest.py
4.      Создать файл BasePage:

class BasePage():
    def __init__(self, browser, url):
        self.browser = browser
        self.url = url

    def open(self)


5.      создать файл main_page.py:
from .base_page import BasePage
from selenium.webdriver.common.by import By

class MainPage(BasePage):
    def go_to_login_page(self):
        login_link = self.browser.find_element(By.CSS_SELECTOR, "#login_link")
        login_link.click()
6.      Создать файл test_main_page.py:

from .pages.main_page import MainPage


def test_guest_can_go_to_login_page(browser):
    link = "http://selenium1py.pythonanywhere.com/"
    page = MainPage(browser, link)   # инициализируем Page Object, передаем в конструктор экземпляр драйвера и url адрес
    page.open()                      # открываем страницу
    page.go_to_login_page()          # выполняем метод страницы — переходим на страницу логина

запуск тестов в командной строке(напр., pytest -v --tb=line --language=en test_main_page.py)

7. Создать файл locators.py

from selenium.webdriver.common.by import By


class MainPageLocators():
    LOGIN_LINK = (By.CSS_SELECTOR, "#login_link")


.      маркировка тестов (Например, мы можем выбрать небольшое количество критичных тестов (smoke),
которые нужно запускать на каждый коммит разработчиков, а остальные тесты обозначить как регрессионные (regression)
и запускать их только перед релизом. Или у нас могут быть тесты, специфичные для конкретного браузера (internet explorer 11),
и мы хотим запускать эти тесты только под данный браузер. Для выборочного запуска таких тестов в PyTest используется маркировка тестов или метки (marks).
Для маркировки теста нужно написать декоратор вида @pytest.mark.mark_name, где mark_name — произвольная строка.
Чтобы запустить тест с нужной маркировкой, нужно передать в командной строке параметр -m и нужную метку:


.      Регистарция меток(Создайте файл pytest.ini в корневой директории вашего тестового проекта и добавьте в файл следующие строки:
[pytest]
markers =
    smoke: marker for smoke tests
    regression: marker for regression tests  #Текст после знака ":" является поясняющим — его можно не писать.

запуск pytest -s -v -m smoke test_fixture8.py не вызывает предупреждение.

можно маркировать целый класс

.      Параметризация тестов(выбор языка, браузера и пр.). Настройка перезапуска упавших тестов через pytest-rerunfailures.
.      codeStyle:
Функции пишутся через_нижнее_подчеркивание: def test_guest_can_see_lesson_name_in_lesson_without_course(self, driver):

Классы пишут с помощью CamelCase: class TestLessonNameWithoutCourseForGuest():

Константы пишут в стиле UPPERCASE: MAIN_PAGE = "/catalog"

.   Проверка элемента на странице через явное ожидание - is_element_present